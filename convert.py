import requests
import time
import traceback
import re
import asyncio
import edge_tts
import unicodedata
from pydub import AudioSegment
import os
import sys

if getattr(sys, 'frozen', False):
    base_path = sys._MEIPASS
    ffmpeg_path = os.path.join(base_path, "ffmpeg.exe")
else:
    ffmpeg_path = "ffmpeg.exe"

AudioSegment.converter = ffmpeg_path

def slugify(text):
    text = unicodedata.normalize('NFD', text)
    text = text.encode('ascii', 'ignore').decode('utf-8')
    text = text.lower()
    text = re.sub(r'[^a-z0-9]+', '-', text)
    return text.strip('-')

MODEL = "deepseek/deepseek-r1:free"
API_URL = "https://openrouter.ai/api/v1/chat/completions"

def clean_for_tts(text):
    text = re.sub(r"\*\*.*?\*\*", "", text)
    text = re.sub(r"\*.*?\*", "", text)
    text = re.sub(r"\(.*?\)", "", text)
    text = re.sub(r"Camera.*?\.", "", text)
    text = re.sub(r"\s+", " ", text).strip()
    return text

async def create_audio_from_text(text, output_path, voice="vi-VN-HoaiMyNeural"):
    communicate = edge_tts.Communicate(text=text, voice=voice)
    await communicate.save(output_path)

def merge_audio_files(output_file, pattern, num_parts):
    print("\nüîÑ ƒêang g·ªôp c√°c ph·∫ßn √¢m thanh l·∫°i th√†nh 1 file...")
    merged = AudioSegment.empty()

    for i in range(num_parts):
        part_file = pattern.format(i + 1)
        if os.path.exists(part_file):
            audio = AudioSegment.from_file(part_file, format="mp3")
            merged += audio
        else:
            print(f"‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y: {part_file}, b·ªè qua.")

    merged.export(output_file, format="mp3")
    print(f"‚úÖ ƒê√£ t·∫°o file g·ªôp: {output_file}")

def run_convert(topic, api_key, num_parts=12, log_func=print, voice="vi-VN-HoaiMyNeural"):
    log_func(f"üöÄ B·∫Øt ƒë·∫ßu ch·∫°y v·ªõi ch·ªß ƒë·ªÅ: {topic}")
    log_func(f"üîë D√πng API key: {api_key[:6]}***")
    log_func(f"üìÑ S·ªë ph·∫ßn: {num_parts}")

    HEADERS = {
        "Authorization": f"Bearer {api_key}",
        "Content-Type": "application/json"
    }

    FILENAME_BASE = slugify(topic)
    output_dir = os.path.join("output", FILENAME_BASE)
    os.makedirs(output_dir, exist_ok=True)

    output_script = os.path.join(output_dir, f"{FILENAME_BASE}.txt")
    output_clean = os.path.join(output_dir, f"{FILENAME_BASE}-clean.txt")

    messages = []

    def call_openrouter_with_headers(messages):
        try:
            data = {
                "model": MODEL,
                "messages": messages
            }
            res = requests.post(API_URL, headers=HEADERS, json=data)

            if res.status_code != 200:
                log_func(f"‚ùå HTTP {res.status_code} - {res.text}")
                return None

            json_data = res.json()
            return json_data["choices"][0]["message"]["content"]

        except requests.exceptions.RequestException:
            log_func("‚ùå L·ªói k·∫øt n·ªëi m·∫°ng ho·∫∑c API:")
            log_func(traceback.format_exc())
            return None
        except Exception:
            log_func("‚ùå L·ªói x·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ OpenRouter:")
            log_func(traceback.format_exc())
            return None

    for i in range(num_parts):
        log_func(f"\nüü° ƒêang l·∫•y ph·∫ßn {i+1}...")

        if i == 0:
            prompt = (
                f"Vi·∫øt ph·∫ßn m·ªü ƒë·∫ßu c·ªßa m·ªôt c√¢u chuy·ªán c·∫£m ƒë·ªông v·ªõi ch·ªß ƒë·ªÅ: '{topic}'. "
                "Vi·∫øt b·∫±ng gi·ªçng vƒÉn t·ª± s·ª±, c·∫£m x√∫c, c√≥ th·ªÉ ƒë·ªçc to b·∫±ng gi·ªçng n√≥i. "
                "Kh√¥ng d√πng d·∫•u * ho·∫∑c m√¥ t·∫£ ƒëi·ªán ·∫£nh. Kho·∫£ng 500 t·ª´. D·ª´ng ·ªü ƒëo·∫°n m·ªü b√†i."
            )
            messages = [{"role": "user", "content": prompt}]
        else:
            if i == num_parts - 1:
                continuation = (
                    "Vi·∫øt ph·∫ßn k·∫øt c·ªßa c√¢u chuy·ªán. K·∫øt l·∫°i b·∫±ng c·∫£m x√∫c s√¢u l·∫Øng, ƒë·ªçng l·∫°i trong l√≤ng ng∆∞·ªùi nghe. "
                    "Kh√¥ng l·∫∑p l·∫°i ph·∫ßn tr∆∞·ªõc. Kho·∫£ng 500 t·ª´."
                )
            else:
                continuation = (
                    "Vi·∫øt ti·∫øp ph·∫ßn th√¢n c√¢u chuy·ªán, li·ªÅn m·∫°ch v·ªõi ph·∫ßn tr∆∞·ªõc. "
                    "Kh√¥ng nh·∫Øc l·∫°i n·ªôi dung c≈©. Kho·∫£ng 500 t·ª´."
                )
            messages.append({"role": "user", "content": continuation})

        reply = call_openrouter_with_headers(messages)
        if not reply or len(reply.strip()) < 50:
            log_func(f"‚ö†Ô∏è N·ªôi dung ph·∫ßn {i+1} r·ªóng ho·∫∑c qu√° ng·∫Øn, b·ªè qua.")
            continue

        log_func(f"‚úÖ ƒê√£ nh·∫≠n ph·∫ßn {i+1}. ƒêang x·ª≠ l√Ω...")

        with open(output_script, "a", encoding="utf-8") as f:
            f.write(f"\n--- PH·∫¶N {i+1} ---\n")
            f.write(reply.strip() + "\n")

        cleaned_text = clean_for_tts(reply)
        with open(output_clean, "a", encoding="utf-8") as f:
            f.write(f"\n--- PH·∫¶N {i+1} ---\n")
            f.write(cleaned_text + "\n")

        audio_filename = os.path.join(output_dir, f"{FILENAME_BASE}-part-{i+1}.mp3")
        asyncio.run(create_audio_from_text(cleaned_text, audio_filename, voice=voice))
        log_func(f"üéß ƒê√£ t·∫°o file √¢m thanh: {audio_filename}")

        messages.append({"role": "assistant", "content": reply})

        time.sleep(10)

    final_audio_file = os.path.join(output_dir, f"{FILENAME_BASE}-final.mp3")
    merge_audio_files(final_audio_file, os.path.join(output_dir, f"{FILENAME_BASE}-part-{{}}.mp3"), num_parts)

    log_func(f"\nüéâ Ho√†n t·∫•t. K·ªãch b·∫£n v√† audio ƒë√£ l∆∞u t·∫°i: {output_dir}")

    return final_audio_file

if __name__ == "__main__":
    TEST_API_KEY = "sk-or-v1-your_api_key_here"
    TEST_TOPIC = "T·∫°i Sao Nh·∫≠t B·∫£n G·∫ßn Nh∆∞ Kh√¥ng C√≥ Tr·ªôm C·∫Øp?"
    run_convert(TEST_TOPIC, TEST_API_KEY)
