import sys
import os
from PyQt5.QtWidgets import (
    QApplication, QWidget, QVBoxLayout, QLabel, QLineEdit, QPushButton, QTextEdit, QHBoxLayout
)
from PyQt5.QtCore import QThread, pyqtSignal
from convert import run_convert
from PyQt5.QtGui import QIcon

class ConvertThread(QThread):
    log_signal = pyqtSignal(str)
    finished_signal = pyqtSignal(str)

    def __init__(self, topic, api_key, num_parts):
        super().__init__()
        self.topic = topic
        self.api_key = api_key
        self.num_parts = num_parts

    def run(self):
        def log_func(msg):
            self.log_signal.emit(msg)

        try:
            final_audio = run_convert(self.topic, self.api_key, self.num_parts, log_func=log_func)
            self.log_signal.emit("‚úÖ Ho√†n t·∫•t chuy·ªÉn ƒë·ªïi!")
            self.finished_signal.emit(final_audio)
        except Exception as e:
            self.log_signal.emit(f"‚ùå L·ªói: {e}")

class MainWindow(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("D√¢u T√¢y Audio")
        if getattr(sys, 'frozen', False):
            base_path = sys._MEIPASS
        else:
            base_path = os.path.abspath(".")

        icon_path = os.path.join(base_path, "dautay.ico")
        self.setWindowIcon(QIcon(icon_path))
        self.resize(600, 450)

        layout = QVBoxLayout()

        # Ch·ªß ƒë·ªÅ
        layout.addWidget(QLabel("Nh·∫≠p ch·ªß ƒë·ªÅ:"))
        self.topic_input = QLineEdit()
        layout.addWidget(self.topic_input)

        # API Key
        layout.addWidget(QLabel("Nh·∫≠p OpenRouter API Key:"))
        self.api_key_input = QLineEdit()
        self.api_key_input.setEchoMode(QLineEdit.Password)  # ·∫©n key khi nh·∫≠p
        layout.addWidget(self.api_key_input)

        # S·ªë ph·∫ßn c√¢u chuy·ªán
        layout.addWidget(QLabel("S·ªë ph·∫ßn c√¢u chuy·ªán:"))
        self.num_parts_input = QLineEdit()
        self.num_parts_input.setText("12")  # m·∫∑c ƒë·ªãnh 12 ph·∫ßn
        layout.addWidget(self.num_parts_input)

        # N√∫t b·∫Øt ƒë·∫ßu v√† m·ªü file
        self.btn_start = QPushButton("B·∫Øt ƒë·∫ßu chuy·ªÉn ƒë·ªïi")
        layout.addWidget(self.btn_start)

        self.btn_open = QPushButton("M·ªü th∆∞ m·ª•c ch·ª©a file audio cu·ªëi")
        self.btn_open.setEnabled(False)
        layout.addWidget(self.btn_open)

        # Log
        layout.addWidget(QLabel("Log:"))
        self.log_output = QTextEdit()
        self.log_output.setReadOnly(True)
        layout.addWidget(self.log_output)

        self.setLayout(layout)

        # K·∫øt n·ªëi n√∫t
        self.btn_start.clicked.connect(self.start_convert)
        self.btn_open.clicked.connect(self.open_audio_file)

        self.final_audio_file = None
        self.thread = None

    def start_convert(self):
        topic = self.topic_input.text().strip()
        api_key = self.api_key_input.text().strip()
        num_parts_str = self.num_parts_input.text().strip()

        if not topic:
            self.log_output.append("‚ö†Ô∏è Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ!")
            return
        if not api_key:
            self.log_output.append("‚ö†Ô∏è Vui l√≤ng nh·∫≠p API Key!")
            return
        if not num_parts_str.isdigit() or int(num_parts_str) < 1:
            self.log_output.append("‚ö†Ô∏è S·ªë ph·∫ßn ph·∫£i l√† s·ªë nguy√™n d∆∞∆°ng!")
            return

        num_parts = int(num_parts_str)

        self.log_output.clear()
        self.btn_start.setEnabled(False)
        self.btn_open.setEnabled(False)

        self.thread = ConvertThread(topic, api_key, num_parts)
        self.thread.log_signal.connect(self.append_log)
        self.thread.finished_signal.connect(self.convert_finished)
        self.thread.start()

    def append_log(self, message):
        self.log_output.append(message)

    def convert_finished(self, audio_path):
        self.final_audio_file = audio_path
        self.btn_start.setEnabled(True)
        self.btn_open.setEnabled(True)
        self.log_output.append(f"üéâ File audio cu·ªëi: {audio_path}")

    def open_audio_file(self):
        if self.final_audio_file and os.path.exists(self.final_audio_file):
            folder = os.path.dirname(self.final_audio_file)
            if sys.platform.startswith('win'):
                os.startfile(folder)
            elif sys.platform == 'darwin':
                os.system(f'open "{folder}"')
            else:
                os.system(f'xdg-open "{folder}"')
        else:
            self.log_output.append("‚ö†Ô∏è File audio kh√¥ng t·ªìn t·∫°i ho·∫∑c kh√¥ng th·ªÉ m·ªü.")

if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())
